function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { createElement, useEffect, useState, Fragment } from 'rax';
import Image from 'rax-image';
import Text from 'rax-text';
import View from 'rax-view';
import styles from './index.css';
export default function TabBar(props) {
  var _useState = useState(''),
      pathname = _useState[0],
      setPathname = _useState[1];

  var _props$config = props.config,
      config = _props$config === void 0 ? {} : _props$config,
      history = props.history,
      _onClick = props.onClick;

  if (!history || !history.location) {
    throw new Error('TabBar should have a props of "history". See https://github.com/ReactTraining/history.');
  }

  var showTabBar = // Have tabBar config
  typeof config === 'object' && Array.isArray(config.items) // Current page need show tabBar
  && config.items.find(function (item) {
    return item.pagePath === pathname;
  });

  var _ref = config || {},
      _ref$backgroundColor = _ref.backgroundColor,
      backgroundColor = _ref$backgroundColor === void 0 ? '#FFF' : _ref$backgroundColor,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      _ref$selectedColor = _ref.selectedColor,
      selectedColor = _ref$selectedColor === void 0 ? '#333' : _ref$selectedColor,
      _ref$textColor = _ref.textColor,
      textColor = _ref$textColor === void 0 ? '#666' : _ref$textColor;

  useEffect(function () {
    setPathname(history.location.pathname);
    history.listen(function (location) {
      setPathname(location.pathname);
    });
  }, []);
  return createElement(Fragment, null, showTabBar ? createElement(View, {
    style: _extends({}, styles.tabBar, {
      backgroundColor: backgroundColor
    })
  }, items.map(function (item, index) {
    var selected = item.pagePath === pathname;
    var itemTextColor = item.textColor || textColor;
    var itemSelectedColor = item.selectedColor || selectedColor;
    return createElement(View, {
      key: "tab-" + index,
      style: styles.tabBarItem,
      onClick: function onClick() {
        _onClick && _onClick(item);
        history.push(item.pagePath);
      }
    }, selected && item.activeIcon ? createElement(Image, {
      style: styles.tabBarItemImg,
      source: {
        uri: item.activeIcon
      }
    }) : null, !selected && item.icon ? createElement(Image, {
      style: styles.tabBarItemImg,
      source: {
        uri: item.icon
      }
    }) : null, createElement(Text, {
      style: _extends({}, styles.tabBarItemTxt, {
        color: selected ? itemSelectedColor : itemTextColor
      })
    }, item.name));
  })) : null);
}