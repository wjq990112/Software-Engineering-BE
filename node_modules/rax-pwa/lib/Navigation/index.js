"use strict";

exports.__esModule = true;
exports.activatePageComponent = activatePageComponent;
exports.getRoutes = getRoutes;
exports.default = Navigation;

var _rax = require("rax");

var _raxView = _interopRequireDefault(require("rax-view"));

var _index = _interopRequireDefault(require("../TabBar/index"));

var _index2 = _interopRequireDefault(require("./index.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _updatePageTrigger = function _updatePageTrigger() {};

var alivePages = [];
var alivePagesCache = {};
var config = {
  maxAlivePageNum: 3,
  pageProps: {},
  routes: []
};

function activatePageComponent(route) {
  route.component().then(function (fn) {
    return fn();
  }).then(function (Page) {
    if (!route.keepAlive) {
      // ignore page without keepAlive
      return false;
    }

    alivePagesCache[route.path] = (0, _rax.createElement)(Page, config.pageProps); // Prevent cache from being too large

    if (Object.keys(alivePagesCache).length > config.maxAlivePageNum) {
      delete alivePagesCache[Object.keys(alivePagesCache)[0]];
    }

    _updatePageTrigger(Date.now());
  });
}

;

function getRoutes() {
  return config.routes;
}

function Navigation(props) {
  var appConfig = props.appConfig,
      component = props.component,
      history = props.history,
      routes = props.routes;
  var maxAlivePageNum = appConfig.maxAlivePageNum,
      tabBar = appConfig.tabBar;

  var _useState = (0, _rax.useState)(null),
      updateTemp = _useState[0],
      setUpdateTemp = _useState[1];

  var Component = component;
  var currentPathname = history.location.pathname;
  var currentPage = routes.find(function (route) {
    return route.path === currentPathname;
  }) || {};
  var isAlivePage = currentPage.keepAlive;
  (0, _rax.useEffect)(function () {
    history.listen(function () {
      _updatePageTrigger(Date.now());
    }); // Use display control alive page, need get alive page list.

    routes.forEach(function (route) {
      if (route.keepAlive) {
        alivePages.push(route);
      }
    }); // If current page is alive page, need update routes.

    if (isAlivePage) {
      _updatePageTrigger(Date.now());
    }
  }, []); // Props to page component

  var pageProps = {};
  Object.keys(props).forEach(function (key) {
    if (key !== 'appConfig' && key !== 'component') {
      pageProps[key] = props[key];
    }
  });
  config.pageProps = pageProps;
  config.routes = routes;
  _updatePageTrigger = setUpdateTemp;
  maxAlivePageNum && (config.maxAlivePageNum = maxAlivePageNum);
  return (0, _rax.createElement)(_rax.Fragment, null, isAlivePage ? null : (0, _rax.createElement)(Component, pageProps), alivePages.length > 0 ? (0, _rax.createElement)(_raxView.default, {
    style: _extends({}, _index2.default.container, {
      display: isAlivePage ? 'block' : 'none'
    })
  }, alivePages.map(function (alivePage, index) {
    var alivePageRoute = routes.find(function (route) {
      return route.path === alivePage.path;
    });
    var isCurrentPage = alivePageRoute.path === currentPage.path;
    var alivePageComponent = alivePagesCache[alivePageRoute.path] || null;
    if (isCurrentPage && !alivePageComponent) activatePageComponent(alivePageRoute);
    return (0, _rax.createElement)(_raxView.default, {
      key: "alivePage" + index,
      style: _extends({}, _index2.default.alivePage, {
        display: isCurrentPage ? 'block' : 'none'
      })
    }, alivePageComponent);
  })) : null, (0, _rax.createElement)(_index.default, {
    config: tabBar,
    history: history
  }));
}