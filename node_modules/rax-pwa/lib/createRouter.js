"use strict";

exports.__esModule = true;
exports.createRouter = createRouter;
exports.router = void 0;

var _rax = require("rax");

var _Error = _interopRequireDefault(require("./Error"));

var _isPathMatched = _interopRequireDefault(require("./isPathMatched"));

var _history = require("history");

var _raxUseRouter = require("rax-use-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var interopRequire = function interopRequire(obj) {
  return obj && obj.__esModule ? obj.default : obj;
}; // Mark if the page is loaded for the first time.
// If it is the first time to load, SSR pageInitialProps is taken from the scripts.
// If the SPA has switched routes then each sub-component needs to run getInitialProps


var isFirstLoadFromSSR = true;
var router = {
  history: null,
  location: null,
  push: _raxUseRouter.push,
  replace: _raxUseRouter.replace,
  go: _raxUseRouter.go
};
exports.router = router;

var getComponentWithInitialProps = function getComponentWithInitialProps(name, Component, routerProps) {
  if (isFirstLoadFromSSR) {
    return (0, _rax.createElement)(Component, routerProps);
  } else {
    return Component.getInitialProps().then(function (props) {
      return (0, _rax.createElement)(Component, _extends({}, routerProps, props));
    }).catch(function (e) {
      console.log(name + " pageInitialProps error: " + e);
      return (0, _rax.createElement)(Component, routerProps);
    });
  }
};

function createRouter(pagesConfig, withSSR, InitialComponent, initialComponentProps) {
  if (withSSR === void 0) {
    withSSR = false;
  }

  if (InitialComponent === void 0) {
    InitialComponent = null;
  }

  if (initialComponentProps === void 0) {
    initialComponentProps = {};
  }

  var pageHistory = withSSR ? (0, _history.createBrowserHistory)() : (0, _history.createHashHistory)();
  if (!withSSR) isFirstLoadFromSSR = false;
  pageHistory.listen(function () {
    // After routing switching, it is considered not the first rendering.
    isFirstLoadFromSSR = false;
  }); // page alive

  var withPageAlive = false;
  var alivePageCache = {};

  var updateComponentTrigger = function updateComponentTrigger() {}; // base config


  var routerProps = {};
  router.history = pageHistory;
  router.location = pageHistory.location;
  var routerConfig = {
    history: pageHistory,
    routes: []
  };
  Object.keys(pagesConfig).forEach(function (page) {
    var route = {
      path: pagesConfig[page].path,
      component: null
    };

    if (pagesConfig[page].pageAlive) {
      withPageAlive = true; // router return empty element

      route.component = function () {
        return (0, _rax.createElement)("div", null);
      }; // add alive page to cache


      alivePageCache[page] = {
        path: pagesConfig[page].path,
        regexp: pagesConfig[page].regexp,
        title: pagesConfig[page].title || null,
        component: null,
        getComponent: pagesConfig[page].component
      };
    } else {
      route.component = function () {
        return pagesConfig[page].component().then(interopRequire).then(function (Page) {
          if (pagesConfig[page].title) {
            document.title = pagesConfig[page].title;
          }

          if (Page.getInitialProps) {
            return getComponentWithInitialProps(page, Page, routerProps);
          }

          return (0, _rax.createElement)(Page, routerProps);
        });
      };
    }

    if (page === 'index') {
      routerConfig.routes.push(_extends({}, route, {
        path: ''
      }));
      routerConfig.routes.push(route);
    } else if (page === '_error') {
      delete route.path;
      routerConfig.routes.push(route);
    } else {
      routerConfig.routes.push(route);
    }
  });

  if (!pagesConfig._error) {
    routerConfig.routes.push({
      component: function component() {
        return (0, _rax.createElement)(_Error.default, null);
      }
    });
  }

  var activateAlivePageComponent = function activateAlivePageComponent(pageName) {
    if (!alivePageCache[pageName]) return false;
    alivePageCache[pageName].getComponent().then(interopRequire).then(function (Page) {
      if (Page.getInitialProps) {
        getComponentWithInitialProps(pageName, Page, routerProps).then(function (Component) {
          alivePageCache[pageName].component = Component;
          updateComponentTrigger(pageHistory.location.pathname + pageName);
        });
      } else {
        alivePageCache[pageName].component = (0, _rax.createElement)(Page, routerProps);
        updateComponentTrigger(pageHistory.location.pathname + pageName);
      }
    });
  };

  router.preload = function (config) {
    if (config.page) {
      pagesConfig[config.page].component();
    } else {
      var linkElement = document.createElement('link');
      linkElement.rel = 'preload';
      linkElement.as = config.as;
      linkElement.href = config.href;
      config.crossorigin && (linkElement.crossorigin = true);
      document.head.appendChild(linkElement);
    }
  };

  router.prerender = function (config) {
    if (config.page) {
      if (withPageAlive) {
        activateAlivePageComponent(config.page);
      } else {
        pagesConfig[config.page].component();
      }
    } else {
      var linkElement = document.createElement('link');
      linkElement.rel = 'prerender';
      linkElement.href = config.href;
      document.head.appendChild(linkElement);
    }
  };

  return function (props) {
    routerProps = _extends({}, props, {
      router: router
    });

    if (InitialComponent) {
      routerConfig.InitialComponent = (0, _rax.createElement)(InitialComponent, _extends({}, routerProps, initialComponentProps));
    }

    var _useRouter = (0, _raxUseRouter.useRouter)(routerConfig),
        component = _useRouter.component;

    var _useState = (0, _rax.useState)(null),
        updateTemp = _useState[0],
        setUpdateTemp = _useState[1];

    updateComponentTrigger = setUpdateTemp;

    if (!withPageAlive) {
      return component;
    } else {
      var cachePageMatched = false;
      return (0, _rax.createElement)("div", {
        style: {
          position: 'relative'
        }
      }, Object.keys(alivePageCache).map(function (pageName) {
        cachePageMatched = (0, _isPathMatched.default)(withSSR ? 'history' : 'hash', alivePageCache[pageName].regexp, pageName);
        var element = alivePageCache[pageName].component;

        if (cachePageMatched && element === null) {
          activateAlivePageComponent(pageName);
        }

        if (cachePageMatched && alivePageCache[pageName].title) {
          document.title = alivePageCache[pageName].title;
        }

        return (0, _rax.createElement)("div", {
          style: {
            display: cachePageMatched ? 'block' : 'none'
          }
        }, element);
      }), cachePageMatched ? null : component);
    }
  };
}